/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * VerdanTech-Backend
 * Backend API of the VerdanTech software project.
 * OpenAPI spec version: 0.1.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';
import type {
	UserCreateInput,
	UserFullSchema,
	UserLoginInput,
	UserPasswordResetConfirmInput,
	UserPasswordResetRequestInput,
	UserProfiles200,
	UserVerifyEmailConfirmInput,
	UserVerifyEmailRequestInput
} from '../verdanTechBackend.schemas';

/**
 * Authenticate the request with JWT cookie authentication.
 * @summary User login
 */
export const userLogin = <TData = AxiosResponse<UserFullSchema>>(
	userLoginInput: UserLoginInput,
	options?: AxiosRequestConfig
): Promise<TData> => {
	return axios.post(`/vdtapi/users/auth/login`, userLoginInput, options);
};
/**
 * Returns the profiles of the user ids given. Returns an error if a user does not exist. If no user ids are provided, the client's profile is returned.
 * @summary User profiles view.
 */
export const userProfiles = <TData = AxiosResponse<UserProfiles200>>(
	userIds?: string[],
	options?: AxiosRequestConfig
): Promise<TData> => {
	return axios.get(`/vdtapi/users/read/${userIds}/profile`, options);
};
/**
 * Closes an email confirmation and verifies the email address.
 * @summary Email confirmation.
 */
export const userEmailConfirmationConfirm = <TData = AxiosResponse<string>>(
	userVerifyEmailConfirmInput: UserVerifyEmailConfirmInput,
	options?: AxiosRequestConfig
): Promise<TData> => {
	return axios.post(
		`/vdtapi/users/verification/email/verification_confirm`,
		userVerifyEmailConfirmInput,
		options
	);
};
/**
 * Requests a new email verification email be sent to the email address.
 * @summary Email confirmation request.
 */
export const userEmailVerificationRequest = <TData = AxiosResponse<string>>(
	userVerifyEmailRequestInput: UserVerifyEmailRequestInput,
	options?: AxiosRequestConfig
): Promise<TData> => {
	return axios.post(
		`/vdtapi/users/verification/email/verification_request`,
		userVerifyEmailRequestInput,
		options
	);
};
/**
 * Closes a password reset request and changes the password
 * @summary Password reset confirm.
 */
export const userPasswordResetConfirm = <TData = AxiosResponse<string>>(
	userPasswordResetConfirmInput: UserPasswordResetConfirmInput,
	options?: AxiosRequestConfig
): Promise<TData> => {
	return axios.post(
		`/vdtapi/users/verification/password/confirm`,
		userPasswordResetConfirmInput,
		options
	);
};
/**
 * Open a new password reset request and sends confirmation email.
 * @summary Password reset request.
 */
export const userPasswordResetRequest = <TData = AxiosResponse<string>>(
	userPasswordResetRequestInput: UserPasswordResetRequestInput,
	options?: AxiosRequestConfig
): Promise<TData> => {
	return axios.post(
		`/vdtapi/users/verification/password/request`,
		userPasswordResetRequestInput,
		options
	);
};
/**
 * Registers a new user. Requires email confirmation: False.
 * @summary User registration.
 */
export const userCreate = <TData = AxiosResponse<UserFullSchema>>(
	userCreateInput: UserCreateInput,
	options?: AxiosRequestConfig
): Promise<TData> => {
	return axios.post(`/vdtapi/users/write/create`, userCreateInput, options);
};
export type UserLoginResult = AxiosResponse<UserFullSchema>;
export type UserProfilesResult = AxiosResponse<UserProfiles200>;
export type UserEmailConfirmationConfirmResult = AxiosResponse<string>;
export type UserEmailVerificationRequestResult = AxiosResponse<string>;
export type UserPasswordResetConfirmResult = AxiosResponse<string>;
export type UserPasswordResetRequestResult = AxiosResponse<string>;
export type UserCreateResult = AxiosResponse<UserFullSchema>;
