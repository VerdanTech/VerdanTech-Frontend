/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * VerdanTech-Backend
 * Backend API of the VerdanTech software project.
 * OpenAPI spec version: 0.1.0
 */
import { faker } from '@faker-js/faker';
import { HttpResponse, delay, http } from 'msw';

export const getGardenAttributesSetMock = () => ({
	attributes: {
		frost_date_profile: faker.helpers.arrayElement([
			faker.helpers.arrayElement([
				{},
				{
					first_frost_date: faker.date.past().toISOString().split('T')[0],
					last_frost_date: faker.date.past().toISOString().split('T')[0]
				}
			]),
			undefined
		]),
		geo_coordinate_profile: faker.helpers.arrayElement([
			faker.helpers.arrayElement([
				{},
				{
					lat: faker.number.int({ min: undefined, max: undefined }),
					long: faker.number.int({ min: undefined, max: undefined })
				}
			]),
			undefined
		])
	},
	creator: faker.helpers.arrayElement([
		faker.helpers.arrayElement([
			{},
			{ id: faker.string.uuid(), username: faker.word.sample() }
		]),
		undefined
	]),
	description: faker.word.sample(),
	id: faker.string.uuid(),
	key: faker.word.sample(),
	memberships: Array.from(
		{ length: faker.number.int({ min: 1, max: 10 }) },
		(_, i) => i + 1
	).map(() => ({
		created_at: `${faker.date.past().toISOString().split('.')[0]}Z`,
		garden_ref: faker.helpers.arrayElement([
			faker.helpers.arrayElement([
				{},
				{ id: faker.string.uuid(), key: faker.word.sample() }
			]),
			undefined
		]),
		role: faker.helpers.arrayElement(['admin', 'editor', 'viewer'] as const),
		user: { id: faker.string.uuid(), username: faker.word.sample() }
	})),
	name: faker.word.sample(),
	num_memberships: faker.number.int({ min: undefined, max: undefined }),
	visibility: faker.helpers.arrayElement(['private', 'unlisted', 'public'] as const)
});

export const getGardenAcceptInviteMock = () => ({
	created_at: `${faker.date.past().toISOString().split('.')[0]}Z`,
	favorite: faker.datatype.boolean(),
	garden_ref: faker.helpers.arrayElement([
		faker.helpers.arrayElement([
			{},
			{ id: faker.string.uuid(), key: faker.word.sample() }
		]),
		undefined
	]),
	inviter: faker.helpers.arrayElement([
		faker.helpers.arrayElement([
			{},
			{ id: faker.string.uuid(), username: faker.word.sample() }
		]),
		undefined
	]),
	open_invite: faker.datatype.boolean(),
	role: faker.helpers.arrayElement(['admin', 'editor', 'viewer'] as const),
	user: { id: faker.string.uuid(), username: faker.word.sample() }
});

export const getGardenChangeMock = () => ({
	created_at: `${faker.date.past().toISOString().split('.')[0]}Z`,
	favorite: faker.datatype.boolean(),
	garden_ref: faker.helpers.arrayElement([
		faker.helpers.arrayElement([
			{},
			{ id: faker.string.uuid(), key: faker.word.sample() }
		]),
		undefined
	]),
	inviter: faker.helpers.arrayElement([
		faker.helpers.arrayElement([
			{},
			{ id: faker.string.uuid(), username: faker.word.sample() }
		]),
		undefined
	]),
	open_invite: faker.datatype.boolean(),
	role: faker.helpers.arrayElement(['admin', 'editor', 'viewer'] as const),
	user: { id: faker.string.uuid(), username: faker.word.sample() }
});

export const getGardenInviteMock = () => ({
	created_at: `${faker.date.past().toISOString().split('.')[0]}Z`,
	favorite: faker.datatype.boolean(),
	garden_ref: faker.helpers.arrayElement([
		faker.helpers.arrayElement([
			{},
			{ id: faker.string.uuid(), key: faker.word.sample() }
		]),
		undefined
	]),
	inviter: faker.helpers.arrayElement([
		faker.helpers.arrayElement([
			{},
			{ id: faker.string.uuid(), username: faker.word.sample() }
		]),
		undefined
	]),
	open_invite: faker.datatype.boolean(),
	role: faker.helpers.arrayElement(['admin', 'editor', 'viewer'] as const),
	user: { id: faker.string.uuid(), username: faker.word.sample() }
});

export const getGardenLeaveMock = () => faker.word.sample();

export const getGardenRevokeMock = () => faker.word.sample();

export const getGardenCreateMock = () => ({
	attributes: {
		frost_date_profile: faker.helpers.arrayElement([
			faker.helpers.arrayElement([
				{},
				{
					first_frost_date: faker.date.past().toISOString().split('T')[0],
					last_frost_date: faker.date.past().toISOString().split('T')[0]
				}
			]),
			undefined
		]),
		geo_coordinate_profile: faker.helpers.arrayElement([
			faker.helpers.arrayElement([
				{},
				{
					lat: faker.number.int({ min: undefined, max: undefined }),
					long: faker.number.int({ min: undefined, max: undefined })
				}
			]),
			undefined
		])
	},
	creator: faker.helpers.arrayElement([
		faker.helpers.arrayElement([
			{},
			{ id: faker.string.uuid(), username: faker.word.sample() }
		]),
		undefined
	]),
	description: faker.word.sample(),
	id: faker.string.uuid(),
	key: faker.word.sample(),
	memberships: Array.from(
		{ length: faker.number.int({ min: 1, max: 10 }) },
		(_, i) => i + 1
	).map(() => ({
		created_at: `${faker.date.past().toISOString().split('.')[0]}Z`,
		garden_ref: faker.helpers.arrayElement([
			faker.helpers.arrayElement([
				{},
				{ id: faker.string.uuid(), key: faker.word.sample() }
			]),
			undefined
		]),
		role: faker.helpers.arrayElement(['admin', 'editor', 'viewer'] as const),
		user: { id: faker.string.uuid(), username: faker.word.sample() }
	})),
	name: faker.word.sample(),
	num_memberships: faker.number.int({ min: undefined, max: undefined }),
	visibility: faker.helpers.arrayElement(['private', 'unlisted', 'public'] as const)
});

export const getGardensMock = () => [
	http.post('*/vdtapi/gardens/attributes/set', async () => {
		await delay(1000);
		return new HttpResponse(JSON.stringify(getGardenAttributesSetMock()), {
			status: 200,
			headers: {
				'Content-Type': 'application/json'
			}
		});
	}),
	http.post('*/vdtapi/gardens/membership/accept_invite', async () => {
		await delay(1000);
		return new HttpResponse(JSON.stringify(getGardenAcceptInviteMock()), {
			status: 200,
			headers: {
				'Content-Type': 'application/json'
			}
		});
	}),
	http.post('*/vdtapi/gardens/membership/change', async () => {
		await delay(1000);
		return new HttpResponse(JSON.stringify(getGardenChangeMock()), {
			status: 200,
			headers: {
				'Content-Type': 'application/json'
			}
		});
	}),
	http.post('*/vdtapi/gardens/membership/invite', async () => {
		await delay(1000);
		return new HttpResponse(JSON.stringify(getGardenInviteMock()), {
			status: 200,
			headers: {
				'Content-Type': 'application/json'
			}
		});
	}),
	http.post('*/vdtapi/gardens/membership/leave', async () => {
		await delay(1000);
		return new HttpResponse(JSON.stringify(getGardenLeaveMock()), {
			status: 200,
			headers: {
				'Content-Type': 'application/json'
			}
		});
	}),
	http.post('*/vdtapi/gardens/membership/revoke', async () => {
		await delay(1000);
		return new HttpResponse(JSON.stringify(getGardenRevokeMock()), {
			status: 200,
			headers: {
				'Content-Type': 'application/json'
			}
		});
	}),
	http.post('*/vdtapi/gardens/write/create', async () => {
		await delay(1000);
		return new HttpResponse(JSON.stringify(getGardenCreateMock()), {
			status: 200,
			headers: {
				'Content-Type': 'application/json'
			}
		});
	})
];
